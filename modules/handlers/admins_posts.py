from aiogram import types
from main import dp
from modules.handlers.text_functions import get_post_text, save_post
from modules.handlers import users_functions
from modules.keyboards import category_front_kb, podcategory_front_kb, type_send_cod, post_type, post_user_type, \
    send_post_kb, start_admin_kb
from modules.dispatcher import Admin_POSTS


# –†–∞–±–æ—Ç–∞–µ–º —Å —Ä–µ–ø–æ—Ä—Ç–∞–º–∏ –Ω–∞ –ø–æ—Å—Ç—ã
@dp.callback_query_handler(text='report_close', state="*")
async def start_menu(call: types.CallbackQuery):
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await call.message.edit_text(text='–ñ–∞–ª–æ–±–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')


# –†–∞–±–æ—Ç–∞–µ–º —Å —Ä–µ–ø–æ—Ä—Ç–∞–º–∏ –Ω–∞ –ø–æ—Å—Ç—ã
@dp.callback_query_handler(text_contains='report_delete$', state="*")
async def start_menu(call: types.CallbackQuery):
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cod = call.data.split('$')[1]
    cod = cod.split("_")
    if len(cod) == 4:
        await call.message.edit_text(text='–ú—É–ª—å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å.')
    else:
        users_functions.update_post_status(cod, status=f'delete_{call.from_user.id}')
        await call.message.edit_text(text='–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ')


# –ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
@dp.callback_query_handler(text='back_category', state=Admin_POSTS.new_post_type_sending_data)
@dp.callback_query_handler(text='create_post', state='*')
async def start_menu(call: types.CallbackQuery):
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    data = users_functions.get_category()
    users_functions.update_user_data(tg_id=call.from_user.id, name=call.from_user.first_name)
    if 'category' not in str(data):
        await call.message.edit_text(text='–ó–¥–µ—Å—å –≤—ã —Å–æ–∑–¥–∞–µ—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.',
                                     reply_markup=category_front_kb(data))
    else:
        await call.message.edit_text(text='–ó–¥–µ—Å—å –≤—ã —Å–æ–∑–¥–∞–µ—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.',
                                     reply_markup=category_front_kb())
    await Admin_POSTS.new_post.set()


# Start menu
@dp.callback_query_handler(state=Admin_POSTS.new_post)
async def start_menu(call: types.CallbackQuery):
    index = str(call.data)[9:]
    name_category = users_functions.get_name(index)['name']
    sub_categorys = users_functions.get_sub_category(index)
    await call.message.edit_text(f'–í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {name_category}. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.',
                                 reply_markup=podcategory_front_kb(index=int(index), category=sub_categorys),
                                 parse_mode='html')
    await Admin_POSTS.new_post_type_sending_data.set()


# Start menu

@dp.callback_query_handler(state=Admin_POSTS.new_post_type_sending_data)
async def start_menu(call: types.CallbackQuery):
    index = str(call.data)[12:]
    users_functions.save_data1(tg_id=call.from_user.id, data=index)
    await call.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–ø—Ä–∞–∫–∏ –¥–∞–Ω–Ω—ã—Ö', reply_markup=type_send_cod())
    await Admin_POSTS.new_post_input_description.set()


# Start menu
@dp.callback_query_handler(state=Admin_POSTS.new_post_input_description, text='get_text')
async def start_menu(call: types.CallbackQuery):
    await call.message.edit_text(f'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞.')
    await Admin_POSTS.new_post_catch_text.set()


# –ù–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(state=Admin_POSTS.new_post_catch_text)
async def start_menu(message: types.Message):
    users_functions.save_data2(tg_id=message.from_user.id, data=message.text)
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥.')
    await Admin_POSTS.new_post_catch_cod.set()


# –ù–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(state=Admin_POSTS.new_post_catch_cod)
async def start_menu(message: types.Message):
    users_functions.save_data3(tg_id=message.from_user.id, data=message.text)
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞.', reply_markup=post_type())
    await Admin_POSTS.new_post_type_time.set()


# Start menu
@dp.callback_query_handler(state=Admin_POSTS.new_post_type_time)
async def start_menu(call: types.CallbackQuery):
    users_functions.save_data4(tg_id=call.from_user.id, data=call.data)
    await call.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ç–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥.', reply_markup=post_user_type())
    await Admin_POSTS.new_post_type_users.set()


# Start menu
@dp.callback_query_handler(state=Admin_POSTS.new_post_type_users)
async def start_menu(call: types.CallbackQuery):
    user_id = call.from_user.id
    users_functions.save_data5(tg_id=call.from_user.id, data=call.data)
    # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞?
    text = get_post_text(user_id)
    await call.message.answer(text=text, parse_mode='html')
    await call.message.answer(f'–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç?', reply_markup=send_post_kb())
    await Admin_POSTS.post_new_post.set()


# Start menu
@dp.callback_query_handler(state=Admin_POSTS.post_new_post, text='confirm')
async def start_menu(call: types.CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞?
    save_post(user_id=call.from_user.id)
    await call.message.edit_text(f'–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω')
    await call.message.answer(text='üëãüèª –ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –ß–µ–º —Ç–µ–±–µ –ø–æ–º–æ—á—å?', reply_markup=start_admin_kb())
