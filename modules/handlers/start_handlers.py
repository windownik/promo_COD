from aiogram import types
from main import dp
from aiogram.dispatcher.filters import Text
import logging
from modules.dispatcher import Admin_Work, Admin_POSTS, User_Work, Admin_Statistic
from aiogram.dispatcher import FSMContext
from modules.handlers import users_functions
from modules.keyboards import start_user_kb, start_admin_kb


# Start menu
@dp.message_handler(commands=['start'], state='*')
async def start_menu(message: types.Message, state: FSMContext):
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    admin_status = users_functions.is_admin(message.from_user.id)
    if admin_status:
        await message.answer(text='üëãüèª –ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –ß–µ–º —Ç–µ–±–µ –ø–æ–º–æ—á—å?', reply_markup=start_admin_kb())
    else:
        users_functions.update_user_data(tg_id=message.from_user.id, name=message.from_user.first_name)
        await message.answer(text='üëãüèª –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –±–æ—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤—Å–µ–º '
                                  '–∂–µ–ª–∞—é—â–∏–º!\n\nüëá –ß—Ç–æ–±—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ!')
        await message.answer(text="–£ –Ω–∞—Å –µ—Å—Ç—å –∫–∞–Ω–∞–ª!\n\n–ß—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö, "
                                  "–ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ üëâ  https://t.me/sovacode", reply_markup=start_user_kb())
    await state.finish()


# Start menu
@dp.callback_query_handler(text='back', state=Admin_Statistic.search_posts)
@dp.callback_query_handler(text='back', state=Admin_Statistic.statistic_start)
@dp.callback_query_handler(text='back', state=Admin_POSTS.post_new_multicod)
@dp.callback_query_handler(text='category_back', state=Admin_Work.admins)
@dp.callback_query_handler(text='back_category', state=Admin_POSTS.new_post)
@dp.callback_query_handler(text='back', state=Admin_Work.moder)
async def start_menu(call: types.CallbackQuery, state: FSMContext):
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    admin_status = users_functions.is_admin(call.from_user.id)
    if admin_status:
        await call.message.edit_text(text='üëãüèª –ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –ß–µ–º —Ç–µ–±–µ –ø–æ–º–æ—á—å?', reply_markup=start_admin_kb())
    await state.finish()


# Start menu
@dp.callback_query_handler(text='back_category', state=User_Work.my_promo_cods)
@dp.callback_query_handler(text='back_category', state=User_Work.reg_premium_user)
@dp.callback_query_handler(text='back_category', state=User_Work.pick_category_premium)
@dp.callback_query_handler(text='back_category', state=User_Work.pick_category)
async def start_menu(call: types.CallbackQuery, state: FSMContext):
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    users_functions.update_user_data(tg_id=call.from_user.id, name=call.from_user.first_name)
    await call.message.answer(text='üëãüèª –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –±–æ—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤—Å–µ–º '
                              '–∂–µ–ª–∞—é—â–∏–º!\n\nüëá –ß—Ç–æ–±—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ!')
    await call.message.answer(text="–£ –Ω–∞—Å –µ—Å—Ç—å –∫–∞–Ω–∞–ª!\n\n–ß—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö, "
                              "–ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ üëâ  https://t.me/sovacode", reply_markup=start_user_kb())
    await state.finish()


# Start menu
@dp.callback_query_handler(text='go_to_main', state='*')
@dp.callback_query_handler(text='as_user', state='*')
async def start_menu(call: types.CallbackQuery, state: FSMContext):
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    users_functions.update_user_data(tg_id=call.from_user.id, name=call.from_user.first_name)
    await call.message.edit_text(text='üëãüèª –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –±–æ—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤—Å–µ–º '
                                      '–∂–µ–ª–∞—é—â–∏–º!\n\nüëá –ß—Ç–æ–±—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ!')
    await call.message.answer(text="–£ –Ω–∞—Å –µ—Å—Ç—å –∫–∞–Ω–∞–ª!\n\n–ß—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö, "
                                   "–ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ üëâ  https://t.me/sovacode", reply_markup=start_user_kb())
    await state.finish()


# Start menu
@dp.message_handler(commands=['create_db'], state='*')
async def start_menu(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–¥
    users_functions.create_tables()

    await message.answer(text='–Ø —Å–æ–∑–¥–∞–ª –≤—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')


# Start menu
@dp.message_handler(commands=['new_admin_is'], state='*')
async def start_menu(message: types.Message):
    users_functions.create_admin(message.from_user.id)

    await message.answer(text='–Ø —Å–æ–∑–¥–∞–ª –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞')


# Start menu
@dp.message_handler(commands=['admin_to_user'], state='*')
async def start_menu(message: types.Message):
    users_functions.delete_admin(message.from_user.id)

    await message.answer(text='–Ø —É–¥–∞–ª–∏–ª –∞–¥–º–∏–Ω–∞')


# Cancel all process
@dp.message_handler(state='*', commands=['cancel'])
@dp.message_handler(Text(equals='cancel', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    await message.reply('–ü—Ä–æ—Ü–µ—Å –æ—Ç–º–µ–Ω–µ–Ω. –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–µ—Ä—Ç—ã. –ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å –≤—Å–µ —Å –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start',
                        reply_markup=types.ReplyKeyboardRemove())
    if current_state is None:
        return
    logging.info('Cancelling state %r', current_state)
    # Cancel state and inform user about it
    await state.finish()
