from aiogram import types
from main import dp
from aiogram.dispatcher import FSMContext
from modules.handlers import users_functions
from modules.keyboards import category_front_kb, podcategory_front_kb, user_second_kb, my_posts_kb, go_to_main, \
    feed_back, start_user_kb, work_with_reports
from modules.dispatcher import bot, User_Work
from modules.handlers.user_work_with_posts import next_post, previous_post, delete_my_post
from modules.handlers.text_functions import get_post_text_user


# Start menu
@dp.callback_query_handler(text='get_more_cod', state='*')
@dp.callback_query_handler(text='back_category', state=User_Work.pick_market)
@dp.callback_query_handler(text='get_cod', state='*')
async def start_menu(call: types.CallbackQuery):
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    data = users_functions.get_category()
    users_functions.update_user_data(tg_id=call.from_user.id, name=call.from_user.first_name)
    if 'category' not in str(data):
        await call.message.edit_text(text='üìÇ –ü—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∂–µ–ª–∞–µ–º—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!',
                                     reply_markup=category_front_kb(data))
    else:
        await call.message.edit_text(text='üìÇ –ü—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∂–µ–ª–∞–µ–º—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!',
                                     reply_markup=category_front_kb())
    await User_Work.pick_category.set()


@dp.callback_query_handler(state=User_Work.pick_category)
async def start_menu(call: types.CallbackQuery):
    index = str(call.data).split("_")[1]
    sub_categorys = users_functions.get_sub_category(int(index))
    if 'sub_category' in str(sub_categorys):
        await call.message.edit_text(f'–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é (–º–∞–≥–∞–∑–∏–Ω):',
                                     reply_markup=podcategory_front_kb(index=int(index)), parse_mode='html')
    else:
        await call.message.edit_text(f'–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é (–º–∞–≥–∞–∑–∏–Ω):',
                                     reply_markup=podcategory_front_kb(index=int(index), category=sub_categorys),
                                     parse_mode='html')
    await User_Work.pick_market.set()


@dp.callback_query_handler(state=User_Work.pick_market)
async def start_menu(call: types.CallbackQuery):
    post_data = users_functions.get_post(call.data, call.from_user.id)
    if 'no_cod' not in str(post_data):
        market_name = post_data['market_name']
        cod = post_data['cod']
        description = post_data['description']
        await call.message.edit_text(text=get_post_text_user(market_name=market_name, cod=cod, description=description),
                                     reply_markup=user_second_kb(post_data['cod_id']),
                                     parse_mode='html')
    else:
        await call.message.edit_text(f'–ö —Å–∞–∂–µ–ª–µ–Ω–∏—é —É –Ω–∞—Å –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞.', reply_markup=user_second_kb())
    await User_Work.cod_status.set()


# –†–∞–±–æ—Ç–∞–µ–º —Å –º–æ–∏–º–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
@dp.callback_query_handler(text='my_cod', state='*')
async def start_menu(call: types.CallbackQuery):
    all_posts = users_functions.get_my_favorite_posts(tg_id=call.from_user.id)
    number_of_posts = len(all_posts)
    if 'no_posts' in str(all_posts):
        await call.message.edit_text(text='–£ –≤–∞—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', reply_markup=go_to_main())
    else:
        data = all_posts['1']
        text = get_post_text_user(cod=data[0], description=data[1], market_name=data[2])
        await call.message.edit_text(text=text, parse_mode='html', reply_markup=my_posts_kb(all_posts=number_of_posts,
                                                                                            cod_id=data[3]))
    await User_Work.my_promo_cods.set()


# –†–∞–±–æ—Ç–∞–µ–º —Å –º–æ–∏–º–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
@dp.callback_query_handler(state=User_Work.my_promo_cods)
async def start_menu(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)
    data = call.data
    if data.startswith('previous_'):
        await previous_post(call)
        await User_Work.my_promo_cods.set()
    elif data.startswith('next_'):
        await next_post(call)
        await User_Work.my_promo_cods.set()
    elif data.startswith('delpost_'):
        await delete_my_post(call)
        await User_Work.my_promo_cods.set()
    else:
        cod = call.data[7:]
        users_functions.save_data1(tg_id=call.from_user.id, data=cod)
        await call.message.edit_text(f'üò£ –ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –ø—Ä–æ–±–ª–µ–º–æ–π.\n\n'
                                     f'–ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –Ω–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —É –≤–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∏–∂–µ?',
                                     reply_markup=go_to_main())
        await User_Work.cod_feed_back.set()


@dp.callback_query_handler(text='feed_back', state='*')
async def start_menu(call: types.CallbackQuery):
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    await call.message.edit_text(text='‚úçÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∏–ª–∏ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –æ—à–∏–±–∫—É - –Ω–∞–ø–∏—à–∏—Ç–µ '
                                      '–Ω–∞—à–µ–º—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –∏–ª–∏ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É!\n\n@Shmelev1982',
                                 reply_markup=feed_back())


# –ñ–∞–ª–æ–±–∞ –Ω–∞ –∫–æ–¥
@dp.callback_query_handler(state=User_Work.cod_status, text_contains='bad_cod')
async def bad_cod(call: types.CallbackQuery):
    cod = call.data[7:]
    users_functions.save_data1(tg_id=call.from_user.id, data=cod)
    await call.message.edit_text(f'üò£ –ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –ø—Ä–æ–±–ª–µ–º–æ–π.\n\n'
                                 f'–ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –Ω–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —É –≤–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∏–∂–µ?',
                                 reply_markup=go_to_main())
    await User_Work.cod_feed_back.set()


# –ñ–∞–ª–æ–±–∞ –Ω–∞ –∫–æ–¥
@dp.message_handler(state=User_Work.cod_feed_back)
async def bad_cod(message: types.Message, state: FSMContext):
    users_functions.send_report(report_text=message.text, tg_id=message.from_user.id)
    cod = users_functions.read_data1(message.from_user.id)
    moder_chat_id = users_functions.get_moder_chat()['chat']
    post = users_functions.get_post_by_index(cod)
    text = get_post_text_user(cod=post['cod'], description=post['description'], market_name=post['market_name'])
    try:
        await bot.send_message(chat_id=moder_chat_id, text=f'{text}\n\n'
                                                           f'---------------------\n'
                                                           f'–¢–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã:\n' + message.text, parse_mode='html',
                               reply_markup=work_with_reports(cod))
    except Exception as ex:
        print('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã', ex)
    await message.answer('‚ò∫Ô∏è –ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∂–∞–ª–æ–±—É, –æ–Ω–∞ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –µ—â–µ –ª—É—á—à–µ!')
    users_functions.update_user_data(tg_id=message.from_user.id, name=message.from_user.first_name)
    await message.answer(text='üëãüèª –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –±–æ—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤—Å–µ–º '
                              '–∂–µ–ª–∞—é—â–∏–º!\n\nüëá –ß—Ç–æ–±—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ!')
    await message.answer(text="–£ –Ω–∞—Å –µ—Å—Ç—å –∫–∞–Ω–∞–ª!\n\n–ß—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö, "
                              "–ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ üëâ  https://t.me/sovacode", reply_markup=start_user_kb())
    await state.finish()
