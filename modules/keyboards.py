from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


send_contact = KeyboardButton(text=f'üìû–ü–æ–¥–µ–ª–∏—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact=True)

send_contact_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(send_contact)


def start_user_kb():
    get_cod = InlineKeyboardButton(text='üõç –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥', callback_data='get_cod')
    my_cod = InlineKeyboardButton(text='üõí –ú–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã', callback_data='my_cod')
    cod_for_u = InlineKeyboardButton(text='üîéüìù –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è!', callback_data='premium_cod_for_u')
    feed_back = InlineKeyboardButton(text='‚úèÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', callback_data='feed_back')
    start_kb = InlineKeyboardMarkup().add(get_cod, my_cod)
    start_kb.add(cod_for_u)
    start_kb.add(feed_back)
    return start_kb


def user_second_kb(cod_id=False):
    my_cod = InlineKeyboardButton(text='üõí –ú–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã', callback_data='my_cod')
    get_more_cod = InlineKeyboardButton(text='üìù –ü–æ–ª—É—á–∏—Ç—å –µ—â–µ –ø—Ä–æ–º–æ–∫–æ–¥!', callback_data='get_more_cod')
    if cod_id:
        bad_cod = InlineKeyboardButton(text='üò¢ –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', callback_data=f'bad_cod{cod_id}')
    else:
        bad_cod = InlineKeyboardButton(text='üò¢ –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', callback_data='bad_cod')
    start_kb = InlineKeyboardMarkup().add(my_cod)
    start_kb.add(get_more_cod)
    start_kb.add(bad_cod)
    return start_kb


def start_admin_kb():
    create_post = InlineKeyboardButton(text='üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', callback_data='create_post')
    my_bot = InlineKeyboardButton(text='‚úèÔ∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è', callback_data='my_bot')
    posts = InlineKeyboardButton(text='–ü–æ—Å—Ç—ã', callback_data='posts')
    admins = InlineKeyboardButton(text='–ê–¥–º–∏–Ω—ã', callback_data='admins')
    inform = InlineKeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='inform')
    as_user = InlineKeyboardButton(text='–ó–∞–π—Ç–∏ –∫–∞–∫ user', callback_data='as_user')
    start_kb = InlineKeyboardMarkup().add(create_post)
    start_kb.add(my_bot)
    start_kb.add(posts, admins)
    start_kb.add(inform, as_user)
    return start_kb


def moderation_kb():
    category = InlineKeyboardButton(text='üìù –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data='category')
    moder_chat = InlineKeyboardButton(text='üóØ –ß–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏', callback_data='moder_chat')
    back = InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back')

    start_kb = InlineKeyboardMarkup().add(category)
    start_kb.add(moder_chat)
    start_kb.add(back)
    return start_kb


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def category_kb(category: dict = None):
    category_kb = InlineKeyboardMarkup()
    if category is None:
        pass
    else:
        for key in category.keys():
            btn = InlineKeyboardButton(text=category[key], callback_data=f'category_{key}')
            category_kb.add(btn)

    add_category = InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.', callback_data='add_category')
    back = KeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='category_back')

    category_kb.add(add_category)
    category_kb.add(back)
    return category_kb


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def podcategory_kb(index: int, category: dict = None):
    category_kb = InlineKeyboardMarkup()
    if category is None:
        pass
    else:
        for key in category.keys():
            btn = InlineKeyboardButton(text=category[key], callback_data=f'subcategory_{index}_{key}')
            category_kb.add(btn)

    add_category = InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é.', callback_data=f'add_podcategory_{index}')
    correct_name = InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data=f'correct_name_{index}')
    delete_category = InlineKeyboardButton(text='‚ùå —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data=f'delete_category_{index}')
    back = KeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'back_category')

    category_kb.add(add_category)
    category_kb.add(correct_name, delete_category)
    category_kb.add(back)
    return category_kb


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def confirm_kb(index):
    category_kb = InlineKeyboardMarkup()
    if index is None:
        confirm = InlineKeyboardButton(text='–î–∞! –í—Å–µ –≤–µ—Ä–Ω–æ!', callback_data=f'confirm')
        back = KeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'back')
    else:
        confirm = InlineKeyboardButton(text='–î–∞! –í—Å–µ –≤–µ—Ä–Ω–æ!', callback_data=f'confirm_{index}')
        back = KeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'backsub_{index}')

    category_kb.add(confirm, back)
    return category_kb


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def market_kb(category_index: int, market_index: int):
    category_kb = InlineKeyboardMarkup()

    correct_name = InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ',
                                        callback_data=f'correct_name_{category_index}_{market_index}')
    delete_category = InlineKeyboardButton(text='‚ùå —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–∞–≥–∞–∑–∏–Ω',
                                           callback_data=f'delete_market_{category_index}_{market_index}')
    back = KeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'back_subc{category_index}')

    category_kb.add(correct_name)
    category_kb.add(delete_category)
    category_kb.add(back)
    return category_kb


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
def category_front_kb(category: dict = None):
    category_kb = InlineKeyboardMarkup()
    if category is None:
        pass
    else:
        for key in category.keys():
            btn = InlineKeyboardButton(text=category[key], callback_data=f'category_{key}')
            category_kb.add(btn)

    back = KeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'back_category')

    category_kb.add(back)
    return category_kb


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def podcategory_front_kb(index: int, category: dict = None):
    category_kb = InlineKeyboardMarkup()
    if category is None:
        pass
    else:
        for key in category.keys():
            btn = InlineKeyboardButton(text=category[key], callback_data=f'subcategory_{index}_{key}')
            category_kb.add(btn)

    back = KeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'back_category')

    category_kb.add(back)
    return category_kb


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
def type_send_cod():
    send_cod_kb = InlineKeyboardMarkup()
    get_file = KeyboardButton(text='–§–∞–π–ª', callback_data=f'get_file')
    get_text = KeyboardButton(text='–û–¥–∏–Ω–æ—á–Ω—ã–π', callback_data=f'get_text')

    send_cod_kb.add(get_file)
    send_cod_kb.add(get_text)
    return send_cod_kb


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
def post_type():
    send_cod_kb = InlineKeyboardMarkup()
    single = KeyboardButton(text='–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π', callback_data=f'single')
    for_all = KeyboardButton(text='–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π', callback_data=f'for_all')

    send_cod_kb.add(single)
    send_cod_kb.add(for_all)
    return send_cod_kb


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
def post_user_type():
    send_cod_kb = InlineKeyboardMarkup()
    single = KeyboardButton(text='–î–ª—è –ø—Ä–µ–º–∏—É–º', callback_data=f'premium')
    for_all = KeyboardButton(text='–î–ª—è –≤—Å–µ—Ö', callback_data=f'simple')

    send_cod_kb.add(single)
    send_cod_kb.add(for_all)
    return send_cod_kb


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
def send_post_kb():
    send_cod_kb = InlineKeyboardMarkup()
    confirm = KeyboardButton(text='‚úîÔ∏è–î–∞! –í—Å–µ –≤–µ—Ä–Ω–æ!', callback_data=f'confirm')
    back = KeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'back')

    send_cod_kb.add(confirm)
    send_cod_kb.add(back)
    return send_cod_kb


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
def my_posts_kb(last_post: int = 1, all_posts: int = 1, cod_id=False):
    send_posts_kb = InlineKeyboardMarkup()
    previous = KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'previous_{last_post}')
    empty = KeyboardButton(text=f'{last_post}/{all_posts}', callback_data=f'empty')
    next = KeyboardButton(text='–î–∞–ª–µ–µ ‚û°Ô∏è', callback_data=f'next_{last_post}')
    del_post = KeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å', callback_data=f'delpost_{last_post}')
    if cod_id:
        bad_cod = InlineKeyboardButton(text='üò¢ –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', callback_data=f'bad_cod{cod_id}')
    else:
        bad_cod = InlineKeyboardButton(text='üò¢ –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', callback_data='bad_cod')
    go_to_main = KeyboardButton(text='üîù –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data=f'go_to_main')

    send_posts_kb.add(previous, empty, next)
    send_posts_kb.add(del_post)
    send_posts_kb.add(bad_cod)
    send_posts_kb.add(go_to_main)
    return send_posts_kb


def go_to_main():
    go_to_main_kb = InlineKeyboardMarkup()
    go_to_main = KeyboardButton(text='üîù –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data=f'go_to_main')
    go_to_main_kb.add(go_to_main)
    return go_to_main_kb


def feed_back():
    go_to_main_kb = InlineKeyboardMarkup()
    feed_back = KeyboardButton(text='‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É', url='https://t.me/sovacode')
    go_to_main = KeyboardButton(text='üîù –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data=f'go_to_main')
    go_to_main_kb.add(feed_back)
    go_to_main_kb.add(go_to_main)
    return go_to_main_kb


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def back_kb():
    category_kb = InlineKeyboardMarkup()
    back = KeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='category_back')
    category_kb.add(back)
    return category_kb


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def new_admin_kb(tg_id: int):
    category_kb = InlineKeyboardMarkup()
    ban_user = KeyboardButton(text='–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'ban_user_{tg_id}')
    delete_admin = KeyboardButton(text='–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–º —é–∑–µ—Ä–æ–º', callback_data=f'delete_admin_{tg_id}')
    set_admin = KeyboardButton(text='–°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º', callback_data=f'set_admin_{tg_id}')
    back = KeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='category_back')
    category_kb.add(delete_admin)
    category_kb.add(set_admin)
    category_kb.add(ban_user, back)
    return category_kb


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∞ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
def new_admin_stat():
    category_kb = InlineKeyboardMarkup()
    admin_stat = KeyboardButton(text='üìù –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤', callback_data='posts_stat')
    users_stat = KeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='users_stat')
    back = KeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back')
    category_kb.add(admin_stat)
    category_kb.add(users_stat)
    category_kb.add(back)
    return category_kb


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∞ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
def stat_posts():
    stat_posts = InlineKeyboardMarkup()
    bad_cod = KeyboardButton(text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞–∫–∞', callback_data='bad_cod')
    top_category = KeyboardButton(text='–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π', callback_data='top_category')
    # top_posts = KeyboardButton(text='–¢–æ–ø –ª—é–±–∏–º—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤', callback_data='top_market')
    back = KeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back')
    stat_posts.add(bad_cod)
    stat_posts.add(top_category)
    # stat_posts.add(top_posts)
    stat_posts.add(back)
    return stat_posts


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∞ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
def search_posts():
    start_posts = InlineKeyboardMarkup()
    posts_in_market = KeyboardButton(text='–ü–æ–∏—Å–∫ –≤ –Ω–µ–¥–∞–≤–Ω–∏—Ö –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö', callback_data='posts_in_market')
    search_by_number = KeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É', callback_data='search_by_number')
    back = KeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back')
    start_posts.add(posts_in_market)
    start_posts.add(search_by_number)
    start_posts.add(back)
    return start_posts


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∞ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
def work_with_post(id_cod: str):
    print(id_cod)
    start_posts = InlineKeyboardMarkup()
    change_description = KeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'change_description${id_cod}')
    delete_post = KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_post${id_cod}')
    back = KeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back')
    start_posts.add(change_description)
    start_posts.add(delete_post)
    start_posts.add(back)
    return start_posts


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∞ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
def work_with_reports(cod: str):
    start_posts = InlineKeyboardMarkup()
    change_description = KeyboardButton(text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∂–∞–ª–æ–±—É', callback_data=f'report_close')
    delete_post = KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç', callback_data=f'report_delete${cod}')
    start_posts.add(change_description)
    start_posts.add(delete_post)
    return start_posts
